#!/usr/bin/env node

/**
 * Script de test pour le service de mise √† jour automatique des diligences
 * Ce script permet de tester manuellement la mise √† jour des statuts
 */

import { initializeDatabase } from '../src/database/db.js';
import diligenceUpdater from '../src/services/diligenceUpdater.js';

async function testDiligenceUpdater() {
  console.log('üß™ D√©marrage du test du service de mise √† jour des diligences...\n');

  try {
    // Initialiser la base de donn√©es
    console.log('üì¶ Initialisation de la base de donn√©es...');
    await initializeDatabase();
    console.log('‚úÖ Base de donn√©es initialis√©e\n');

    // Cr√©er quelques donn√©es de test
    console.log('üìã Cr√©ation de donn√©es de test...');
    const db = await initializeDatabase();
    
    // Ins√©rer des diligences de test avec diff√©rentes dates
    const aujourdHui = new Date();
    const hier = new Date(aujourdHui);
    hier.setDate(aujourdHui.getDate() - 1);
    const demain = new Date(aujourdHui);
    demain.setDate(aujourdHui.getDate() + 1);

    const diligencesTest = [
      {
        titre: 'Diligence en retard (date hier)',
        directiondestinataire: 'Test Direction',
        datedebut: hier.toISOString().split('T')[0],
        datefin: hier.toISOString().split('T')[0],
        description: 'Diligence de test avec date d√©pass√©e',
        priorite: 'Haute',
        statut: 'En cours', // Doit devenir "En retard"
        created_by: 1
      },
      {
        titre: 'Diligence normale (date demain)',
        directiondestinataire: 'Test Direction',
        datedebut: aujourdHui.toISOString().split('T')[0],
        datefin: demain.toISOString().split('T')[0],
        description: 'Diligence de test avec date future',
        priorite: 'Moyenne',
        statut: 'En cours', // Doit rester "En cours"
        created_by: 1
      },
      {
        titre: 'Diligence planifi√©e (d√©but aujourd\'hui)',
        directiondestinataire: 'Test Direction',
        datedebut: aujourdHui.toISOString().split('T')[0],
        datefin: demain.toISOString().split('T')[0],
        description: 'Diligence de test qui doit d√©marrer',
        priorite: 'Basse',
        statut: 'Planifi√©', // Doit devenir "En cours"
        created_by: 1
      }
    ];

    // Nettoyer les anciennes donn√©es de test
    await db.run("DELETE FROM diligences WHERE titre LIKE 'Diligence de test%'");

    // Ins√©rer les nouvelles donn√©es
    for (const diligence of diligencesTest) {
      await db.run(
        `INSERT INTO diligences (titre, directiondestinataire, datedebut, datefin, description, priorite, statut, created_by, created_at, updated_at)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))`,
        [diligence.titre, diligence.directiondestinataire, diligence.datedebut, diligence.datefin, 
         diligence.description, diligence.priorite, diligence.statut, diligence.created_by]
      );
    }

    console.log('‚úÖ Donn√©es de test cr√©√©es\n');

    // Afficher l'√©tat avant la mise √† jour
    console.log('üìä √âtat avant la mise √† jour:');
    const avantUpdate = await db.all("SELECT id, titre, statut, datefin FROM diligences WHERE titre LIKE 'Diligence de test%' ORDER BY id");
    avantUpdate.forEach(d => {
      console.log(`   ${d.id}. ${d.titre} - Statut: ${d.statut} - Date fin: ${d.datefin}`);
    });
    console.log('');

    // Ex√©cuter la mise √† jour
    console.log('üîÑ Ex√©cution de la mise √† jour automatique...');
    await diligenceUpdater.forceUpdate();
    console.log('‚úÖ Mise √† jour termin√©e\n');

    // Afficher l'√©tat apr√®s la mise √† jour
    console.log('üìä √âtat apr√®s la mise √† jour:');
    const apresUpdate = await db.all("SELECT id, titre, statut, datefin FROM diligences WHERE titre LIKE 'Diligence de test%' ORDER BY id");
    apresUpdate.forEach(d => {
      console.log(`   ${d.id}. ${d.titre} - Statut: ${d.statut} - Date fin: ${d.datefin}`);
    });
    console.log('');

    // V√©rifier les r√©sultats
    console.log('‚úÖ R√©sultats du test:');
    const results = apresUpdate.map(d => {
      const expectedStatus = d.titre.includes('retard') ? 'En retard' : 
                            d.titre.includes('planifi√©e') ? 'En cours' : 'En cours';
      
      const isCorrect = d.statut === expectedStatus;
      console.log(`   ${d.titre}: ${isCorrect ? '‚úÖ' : '‚ùå'} (Attendu: ${expectedStatus}, Obtenu: ${d.statut})`);
      return isCorrect;
    });

    const successCount = results.filter(r => r).length;
    const totalCount = results.length;

    console.log(`\nüìà R√©sum√©: ${successCount}/${totalCount} tests r√©ussis`);

    if (successCount === totalCount) {
      console.log('\nüéâ Tous les tests ont r√©ussi ! Le service de mise √† jour fonctionne correctement.');
    } else {
      console.log('\n‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la logique de mise √† jour.');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    process.exit(1);
  }
}

// Ex√©cuter le test
testDiligenceUpdater().then(() => {
  console.log('\nüß™ Test termin√©');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
  process.exit(1);
});