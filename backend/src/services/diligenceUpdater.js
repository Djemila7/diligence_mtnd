import { getDatabase } from '../database/db.js';

/**
 * Service de mise √† jour automatique des statuts des diligences
 * V√©rifie les dates d'√©ch√©ance et met √† jour les statuts en cons√©quence
 */
class DiligenceUpdater {
  constructor() {
    this.isRunning = false;
  }

  /**
   * V√©rifie et met √† jour les statuts des diligences
   */
  async updateDiligenceStatuses() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Mise √† jour des diligences d√©j√† en cours, skip...');
      return;
    }

    this.isRunning = true;
    console.log('üîÑ D√©but de la mise √† jour automatique des statuts des diligences...');

    try {
      const database = await getDatabase();
      const now = new Date().toISOString().split('T')[0]; // Date du jour au format YYYY-MM-DD

      // 1. Mettre √† jour les diligences dont la date de fin est d√©pass√©e (statut ‚Üí "En retard")
      const updateLateDiligences = await database.run(
        `UPDATE diligences 
         SET statut = 'En retard', updated_at = datetime('now')
         WHERE statut IN ('Planifi√©', 'En cours') 
         AND datefin < ? 
         AND datefin IS NOT NULL 
         AND datefin != ''`,
        [now]
      );

      if (updateLateDiligences.changes > 0) {
        console.log(`‚úÖ ${updateLateDiligences.changes} diligence(s) marqu√©e(s) comme "En retard"`);
      }

      // 2. Mettre √† jour les diligences planifi√©es dont la date de d√©but est atteinte (statut ‚Üí "En cours")
      const updateStartedDiligences = await database.run(
        `UPDATE diligences 
         SET statut = 'En cours', updated_at = datetime('now')
         WHERE statut = 'Planifi√©' 
         AND datedebut <= ? 
         AND datedebut IS NOT NULL 
         AND datedebut != ''`,
        [now]
      );

      if (updateStartedDiligences.changes > 0) {
        console.log(`‚úÖ ${updateStartedDiligences.changes} diligence(s) marqu√©e(s) comme "En cours"`);
      }

      // 3. Mettre √† jour les diligences termin√©es dont la date de fin est dans le futur (statut ‚Üí "En cours")
      // Cela peut arriver si une diligence a √©t√© marqu√©e manuellement comme termin√©e avant la date de fin
      const updateIncorrectlyFinished = await database.run(
        `UPDATE diligences 
         SET statut = 'En cours', updated_at = datetime('now')
         WHERE statut = 'Termin√©' 
         AND datefin > ? 
         AND datefin IS NOT NULL 
         AND datefin != ''`,
        [now]
      );

      if (updateIncorrectlyFinished.changes > 0) {
        console.log(`‚ö†Ô∏è ${updateIncorrectlyFinished.changes} diligence(s) remise(s) en cours (termin√©e avant la date de fin)`);
      }

      console.log('‚úÖ Mise √† jour automatique des statuts termin√©e');

    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour automatique des statuts:', error);
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * D√©marre le service de mise √† jour p√©riodique
   * @param {number} intervalMinutes - Intervalle en minutes entre les mises √† jour
   */
  startAutoUpdate(intervalMinutes = 5) {
    console.log(`üöÄ D√©marrage du service de mise √† jour automatique (intervalle: ${intervalMinutes} minutes)`);
    
    // Ex√©cuter imm√©diatement une premi√®re mise √† jour
    this.updateDiligenceStatuses();
    
    // Configurer la mise √† jour p√©riodique
    this.intervalId = setInterval(() => {
      this.updateDiligenceStatuses();
    }, intervalMinutes * 60 * 1000);
  }

  /**
   * Arr√™te le service de mise √† jour p√©riodique
   */
  stopAutoUpdate() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      console.log('‚èπÔ∏è Service de mise √† jour automatique arr√™t√©');
    }
  }

  /**
   * Force une mise √† jour imm√©diate (pour tests ou appels manuels)
   */
  async forceUpdate() {
    console.log('üîß Mise √† jour forc√©e des statuts des diligences...');
    await this.updateDiligenceStatuses();
  }
}

// Export singleton instance
export default new DiligenceUpdater();