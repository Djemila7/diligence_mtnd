// Script de test pour valider une diligence
import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3003/api';

async function testValidation() {
  console.log('üß™ Test de validation de diligence...');

  try {
    // 1. Se connecter en tant qu'admin
    console.log('üîê Connexion en tant qu\'admin...');
    const loginResponse = await fetch(`${BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'admin@example.com',
        password: 'admin123'
      })
    });

    if (!loginResponse.ok) {
      throw new Error(`√âchec de la connexion: ${loginResponse.status} ${loginResponse.statusText}`);
    }

    const loginData = await loginResponse.json();
    console.log('‚úÖ Connexion r√©ussie:', loginData.message);
    
    const token = loginData.token;
    if (!token) {
      throw new Error('Token non re√ßu dans la r√©ponse de connexion');
    }

    // 2. R√©cup√©rer les diligences
    console.log('üìã R√©cup√©ration des diligences...');
    const diligencesResponse = await fetch(`${BASE_URL}/diligences`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      }
    });

    if (!diligencesResponse.ok) {
      throw new Error(`√âchec de la r√©cup√©ration des diligences: ${diligencesResponse.status} ${diligencesResponse.statusText}`);
    }

    const diligences = await diligencesResponse.json();
    console.log(`üìä ${diligences.length} diligence(s) trouv√©e(s)`);

    // Trouver une diligence en statut "√Ä valider"
    const diligenceAValider = diligences.find(d => d.statut === '√Ä valider');
    
    if (!diligenceAValider) {
      console.log('‚ÑπÔ∏è Aucune diligence en statut "√Ä valider". Cr√©ation d\'une nouvelle diligence...');
      
      // Cr√©er une nouvelle diligence
      const createResponse = await fetch(`${BASE_URL}/diligences`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          titre: 'Diligence de test pour validation',
          directiondestinataire: 'Test',
          datedebut: '2025-01-01',
          datefin: '2025-01-10',
          description: 'Diligence cr√©√©e pour tester le processus de validation',
          priorite: 'Moyenne',
          statut: '√Ä valider',
          destinataire: '[]',
          progression: 100,
          created_by: loginData.user.id
        })
      });

      if (!createResponse.ok) {
        throw new Error(`√âchec de la cr√©ation de la diligence: ${createResponse.status} ${createResponse.statusText}`);
      }

      const createData = await createResponse.json();
      console.log('‚úÖ Diligence cr√©√©e:', createData.message);
      
      // Utiliser cette nouvelle diligence pour le test
      const diligenceId = createData.diligenceId;
      
      // 3. Valider la diligence
      console.log(`‚úÖ Validation de la diligence ${diligenceId}...`);
      const validateResponse = await fetch(`${BASE_URL}/diligences/${diligenceId}/validate`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          validation_status: 'approved',
          comment: 'Test de validation r√©ussi'
        })
      });

      if (!validateResponse.ok) {
        const errorText = await validateResponse.text();
        console.error('‚ùå R√©ponse de validation:', validateResponse.status, validateResponse.statusText);
        console.error('‚ùå D√©tails de l\'erreur:', errorText);
        throw new Error(`√âchec de la validation: ${validateResponse.status} ${validateResponse.statusText}`);
      }

      const validateData = await validateResponse.json();
      console.log('üéâ Validation r√©ussie:', validateData.message);
      
    } else {
      console.log(`‚úÖ Diligence trouv√©e en statut "√Ä valider": ${diligenceAValider.id} - ${diligenceAValider.titre}`);
      
      // 3. Valider la diligence existante
      console.log(`‚úÖ Validation de la diligence ${diligenceAValider.id}...`);
      const validateResponse = await fetch(`${BASE_URL}/diligences/${diligenceAValider.id}/validate`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          validation_status: 'approved',
          comment: 'Test de validation r√©ussi'
        })
      });

      if (!validateResponse.ok) {
        const errorText = await validateResponse.text();
        console.error('‚ùå R√©ponse de validation:', validateResponse.status, validateResponse.statusText);
        console.error('‚ùå D√©tails de l\'erreur:', errorText);
        throw new Error(`√âchec de la validation: ${validateResponse.status} ${validateResponse.statusText}`);
      }

      const validateData = await validateResponse.json();
      console.log('üéâ Validation r√©ussie:', validateData.message);
    }

    console.log('‚úÖ Test de validation termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test de validation:', error.message);
    if (error.stack) {
      console.error('Stack:', error.stack);
    }
    process.exit(1);
  }
}

// Ex√©cuter le test
testValidation();